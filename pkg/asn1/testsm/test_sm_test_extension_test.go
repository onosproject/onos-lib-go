// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

package testsm

import (
	"encoding/hex"
	"github.com/onosproject/onos-lib-go/pkg/asn1/aper"
	"gotest.tools/assert"
	"testing"
)

var testExtension1Bytes = []byte{0xc0, 0x01, 0x20, 0x00, 0xf0, 0xb9, 0x32,
	0x01, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff}

var testExtension2BytesNoFirstItem = []byte{0xc0, 0x01, 0x20, 0x00, 0xf0, 0xb9, 0x32, 0x10, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff,
	0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40,
	0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9,
	0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77,
	0xff}

var testExtension2BytesFull = []byte{0xc0, 0x01, 0x20, 0x00, 0xf0, 0xb9, 0x32, 0x11, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff,
	0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40,
	0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9,
	0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77,
	0xff, 0x06, 0x40, 0xf0, 0xb9, 0x32, 0x77, 0xff}

func Test_SequenceExtensionItem(t *testing.T) {

	msg := &TestExtension1{
		Item1: 32,
		Item2: []byte{0xF0, 0xB9, 0x32},
		Ext1:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
	}

	aperBytes, err := aper.MarshalWithParams(msg, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, aperBytes != nil)
	t.Logf("APER \n%s", hex.Dump(aperBytes))

	assert.DeepEqual(t, aperBytes, testExtension1Bytes)

	// Now decode the bytes and compare messages
	result := &TestExtension1{}
	err = aper.UnmarshalWithParams(aperBytes, result, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	assert.Equal(t, msg.String(), result.String())
	t.Logf("Decoded message is\n%v", result)
}

func Test_SequenceExtensionItemsFull(t *testing.T) {

	msg := &TestExtension2{
		Item1: 32,
		Item2: []byte{0xF0, 0xB9, 0x32},
		Ext1:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext2:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext3:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext4:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext5:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext6:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext7:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext8:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext9:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
	}

	aperBytes, err := aper.MarshalWithParams(msg, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, aperBytes != nil)
	t.Logf("APER \n%s", hex.Dump(aperBytes))

	assert.DeepEqual(t, aperBytes, testExtension2BytesFull)

	// Now decode the bytes and compare messages
	result := &TestExtension2{}
	err = aper.UnmarshalWithParams(aperBytes, result, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	assert.Equal(t, msg.String(), result.String())
	t.Logf("Decoded message is\n%v", result)
}

func Test_SequenceExtensionItemsNoFirstItem(t *testing.T) {

	msg := &TestExtension2{
		Item1: 32,
		Item2: []byte{0xF0, 0xB9, 0x32},
		//Ext1:  []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext2: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext3: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext4: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext5: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext6: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext7: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext8: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
		Ext9: []byte{0xF0, 0xB9, 0x32, 0x77, 0xFF},
	}

	aperBytes, err := aper.MarshalWithParams(msg, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, aperBytes != nil)
	t.Logf("APER \n%s", hex.Dump(aperBytes))

	assert.DeepEqual(t, aperBytes, testExtension2BytesNoFirstItem)

	// Now decode the bytes and compare messages
	result := &TestExtension2{}
	err = aper.UnmarshalWithParams(aperBytes, result, "valueExt", Choicemap, CanonicalChoicemap)
	assert.NilError(t, err)
	assert.Assert(t, result != nil)
	assert.Equal(t, msg.String(), result.String())
	t.Logf("Decoded message is\n%v", result)
}
