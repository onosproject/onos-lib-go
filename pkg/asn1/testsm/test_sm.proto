// SPDX-FileCopyrightText: 2021-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0

////////////////////// test-sm-ies.proto //////////////////////
// Protobuf generated from /tes_sm.asn1 by asn1c-0.9.29
// TEST-SM-IEs { iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(0) e2(1) version1(1) e2sm(1) test-sm-IEs(0) }

syntax = "proto3";

package aper.test.v1;

import "asn1/v1/asn1.proto";

//package test_sm_aper_go_lib.v1;
option go_package = "pkg/asn1/testsm";

//option go_package = "test_sm_aper_go_lib/v1/test-sm-ies";

//import "validate/v1/validate.proto";

// enumerated from tes_sm.asn1:161
//{TEST-Enumerated}
enum TestEnumerated {
    TEST_ENUMERATED_ENUM1 = 0;
    TEST_ENUMERATED_ENUM2 = 1;
    TEST_ENUMERATED_ENUM3 = 2;
    TEST_ENUMERATED_ENUM4 = 3;
    TEST_ENUMERATED_ENUM5 = 4;
    TEST_ENUMERATED_ENUM6 = 5;
};

// enumerated from tes_sm.asn1:170
//{TEST-EnumeratedExtensible}
enum TestEnumeratedExtensible {
    TEST_ENUMERATED_EXTENSIBLE_ENUM1 = 0;
    TEST_ENUMERATED_EXTENSIBLE_ENUM2 = 1;
    TEST_ENUMERATED_EXTENSIBLE_ENUM3 = 2;
    TEST_ENUMERATED_EXTENSIBLE_ENUM4 = 3;
    TEST_ENUMERATED_EXTENSIBLE_ENUM5 = 4;
    TEST_ENUMERATED_EXTENSIBLE_ENUM6 = 5;
};

//{TEST-EnumeratedExtensible}
enum TestFullyOptionalSequenceItem4 {
    TEST_FULLY_OPTIONAL_SEQUENCE_ITEM4_ONE = 0;
    TEST_FULLY_OPTIONAL_SEQUENCE_ITEM4_TWO = 1;
};

// sequence from tes_sm.asn1:15
// {TEST-UnconstrainedInt}
message TestUnconstrainedInt {
    int32 attr_uci_a = 1 [json_name = "attrUciA"];
    int32 attr_uci_b = 2 [json_name = "attrUciB"];
};

// sequence from tes_sm.asn1:20
// {TEST-ConstrainedInt}
message TestConstrainedInt {
    // @inject_tag: aper:"valueLB:10,valueUB:100"
    int32 attr_ci_a = 1 [json_name = "attrCiA"];
    // @inject_tag: aper:"valueLB:255,valueUB:65535"
    int32 attr_ci_b = 2 [json_name = "attrCiB"];
    // @inject_tag: aper:"valueLB:10,valueUB:4294967295"
    int32 attr_ci_c = 3 [json_name = "attrCiC"];
    // @inject_tag: aper:"valueUB:100"
    int32 attr_ci_d = 4 [json_name = "attrCiD"];
    // @inject_tag: aper:"valueLB:10,valueUB:20"
    int32 attr_ci_e = 5 [json_name = "attrCiE"];
    // @inject_tag: aper:"valueLB:10,valueUB:10"
    int32 attr_ci_f = 6 [json_name = "attrCiF"];
    // @inject_tag: aper:"valueLB:10,valueUB:10,valueExt"
    int32 attr_ci_g = 7 [json_name = "attrCiG"];
};

// sequence from tes_sm.asn1:29
// {TEST-UnconstrainedReal}
message TestUnconstrainedReal {
    double attr_ucr_a = 1 [json_name = "attrUcrA"];
    double attr_ucr_b = 2 [json_name = "attrUcrB"];
};

// sequence from tes_sm.asn1:34
// {TEST-ConstrainedReal}
message TestConstrainedReal {
    // @inject_tag: aper:"valueLB:10,valueUB:100"
    double attr_cr_a = 1 [json_name = "attrCrA"];
    // @inject_tag: aper:"valueLB:10"
    double attr_cr_b = 2 [json_name = "attrCrB"];
    // @inject_tag: aper:"valueUB:100"
    double attr_cr_c = 3 [json_name = "attrCrC"];
    // @inject_tag: aper:"valueLB:10,valueUB:20"
    double attr_cr_d = 4 [json_name = "attrCrD"];
    // @inject_tag: aper:"valueLB:10,valueUB:10"
    double attr_cr_e = 5 [json_name = "attrCrE"];
    // @inject_tag: aper:"valueLB:10,valueUB:10,valueExt"
    double attr_cr_f = 6 [json_name = "attrCrF"];
};

// sequence from tes_sm.asn1:43
// {TEST-BitString}
message TestBitString {
    asn1.v1.BitString attr_bs1 = 1 [json_name = "attrBs1"];
    // @inject_tag: aper:"sizeLB:20,sizeUB:20"
    asn1.v1.BitString attr_bs2 = 2 [json_name = "attrBs2"];
    // @inject_tag: aper:"sizeLB:20,sizeUB:20,sizeExt"
    asn1.v1.BitString attr_bs3 = 3 [json_name = "attrBs3"];
    // @inject_tag: aper:"sizeLB:0,sizeUB:18"
    asn1.v1.BitString attr_bs4 = 4 [json_name = "attrBs4"];
    // @inject_tag: aper:"sizeLB:22,sizeUB:32"
    asn1.v1.BitString attr_bs5 = 5 [json_name = "attrBs5"];
    // @inject_tag: aper:"sizeLB:28,sizeUB:32,sizeExt"
    asn1.v1.BitString attr_bs6 = 6 [json_name = "attrBs6"];
    // @inject_tag: aper:"sizeLB:22,sizeUB:36,optional"
    optional asn1.v1.BitString attr_bs7 = 7 [json_name = "attrBs7"];
};

// sequence from tes_sm.asn1:53
// {TEST-Choices}
message TestChoices {
    string other_attr = 1 [json_name = "otherAttr"];
    Choice1 choice1 = 2 [json_name = "choice1"];
    Choice2 choice2 = 3 [json_name = "choice2"];
    Choice3 choice3 = 4 [json_name = "choice3"];
    // @inject_tag: aper:"choiceExt"
    Choice4 choice4 = 5 [json_name = "choice4"];
};

// sequence from tes_sm.asn1:62
// {Choice1}
message Choice1 {
    // choice from tes_sm.asn1:62
    oneof choice1 {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 choice1_a = 1 [json_name = "choice1A"];
    }
};

// sequence from tes_sm.asn1:65
// {Choice2}
message Choice2 {
    // choice from tes_sm.asn1:65
    oneof choice2 {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 choice2_a = 1 [json_name = "choice2A"];
        // @inject_tag: aper:"choiceIdx:2,valueExt"
        int32 choice2_b = 2 [json_name = "choice2B"];
    }
};

// sequence from tes_sm.asn1:70
// {Choice3}
message Choice3 {
    // choice from tes_sm.asn1:70
    oneof choice3 {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 choice3_a = 1 [json_name = "choice3A"];
        // @inject_tag: aper:"choiceIdx:2,valueExt"
        int32 choice3_b = 2 [json_name = "choice3B"];
        // @inject_tag: aper:"choiceIdx:3,valueExt"
        int32 choice3_c = 3 [json_name = "choice3C"];
    }
};

// sequence from tes_sm.asn1:77
// {Choice4}
message Choice4 {
    // choice from tes_sm.asn1:77
    // @inject_tag: aper:"valueExt"
    oneof choice4 {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 choice4_a = 1 [json_name = "choice4A"];
    }
};

// sequence from tes_sm.asn1:82
// {TEST-ConstrainedChoices}
message TestConstrainedChoices {
    // @inject_tag: aper:"sizeLB:1,sizeUB:50,sizeExt"
    string other_cattr = 1 [json_name = "otherCAttr"];
    ConstrainedChoice1 constrained_choice1 = 2 [json_name = "constrainedChoice1"];
    ConstrainedChoice2 constrained_choice2 = 3 [json_name = "constrainedChoice2"];
    ConstrainedChoice3 constrained_choice3 = 4 [json_name = "constrainedChoice3"];
    // @inject_tag: aper:"valueExt"
    ConstrainedChoice4 constrained_choice4 = 5 [json_name = "constrainedChoice4"];
};

// sequence from tes_sm.asn1:91
// {ConstrainedChoice1}
message ConstrainedChoice1 {
    // choice from tes_sm.asn1:91
    oneof constrained_choice1 {
        // @inject_tag: aper:"choiceIdx:1,valueLB:1,valueUB:128,valueExt"
        int32 constrained_choice1_a = 1 [json_name = "constrainedChoice1A"];
    }
};

// sequence from tes_sm.asn1:94
// {ConstrainedChoice2}
message ConstrainedChoice2 {
    // choice from tes_sm.asn1:94
    oneof constrained_choice2 {
        // @inject_tag: aper:"choiceIdx:1,valueLB:0,valueUB:15,valueExt"
        int32 constrained_choice2_a = 1 [json_name = "constrainedChoice2A"];
        // @inject_tag: aper:"choiceIdx:2,valueLB:1,valueUB:4294967295,valueExt"
        int32 constrained_choice2_b = 2 [json_name = "constrainedChoice2B"];
    }
};

// sequence from tes_sm.asn1:99
// {ConstrainedChoice3}
message ConstrainedChoice3 {
    // choice from tes_sm.asn1:99
    oneof constrained_choice3 {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 constrained_choice3_a = 1 [json_name = "constrainedChoice3A"];
        // @inject_tag: aper:"choiceIdx:2,valueLB:0,valueUB:15,valueExt"
        int32 constrained_choice3_b = 2 [json_name = "constrainedChoice3B"];
        // @inject_tag: aper:"choiceIdx:3,valueLB:1,valueUB:4294967295,valueExt"
        int32 constrained_choice3_c = 3 [json_name = "constrainedChoice3C"];
        // @inject_tag: aper:"choiceIdx:4,valueLB:1,valueUB:1,valueExt"
        int32 constrained_choice3_d = 4 [json_name = "constrainedChoice3D"];
    }
};

// sequence from tes_sm.asn1:107
// {ConstrainedChoice4}
message ConstrainedChoice4 {
    // choice from tes_sm.asn1:107
    // @inject_tag: aper:"valueExt"
    oneof constrained_choice4 {
        // @inject_tag: aper:"choiceIdx:1,valueLB:1,valueUB:128,valueExt"
        int32 constrained_choice4_a = 1 [json_name = "constrainedChoice4A"];
    }
};

// sequence from tes_sm.asn1:107
// {TEST-NestedChoice}
message TestNestedChoice {
    // choice from tes_sm.asn1:107
    // @inject_tag: aper:"valueExt"
    oneof test_nested_choice {
        Choice3 option1 = 1 [json_name = "option1"];
        ConstrainedChoice3 option2 = 2 [json_name = "option2"];
        // @inject_tag: aper:"valueExt"
        ConstrainedChoice4 option3 = 3 [json_name = "option3"];
    }
};

// sequence from tes_sm.asn1:112
// {TEST-OctetString}
message TestOctetString {
    bytes attr_os1 = 1 [json_name = "attrOs1"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:2"
    bytes attr_os2 = 2 [json_name = "attrOs2"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:2,sizeExt"
    bytes attr_os3 = 3 [json_name = "attrOs3"];
    // @inject_tag: aper:"sizeLB:0,sizeUB:3"
    bytes attr_os4 = 4 [json_name = "attrOs4"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:3"
    bytes attr_os5 = 5 [json_name = "attrOs5"];
    // @inject_tag: aper:"sizeLB:1,sizeUB:3,sizeExt"
    bytes attr_os6 = 6 [json_name = "attrOs6"];
    // @inject_tag: aper:"optional,sizeLB:2,sizeUB:6"
    optional bytes attr_os7 = 7 [json_name = "attrOs7"];
};

// sequence from tes_sm.asn1:122
// {TEST-PrintableString}
message TestPrintableString {
    string attr_ps1 = 1 [json_name = "attrPs1"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:2"
    string attr_ps2 = 2 [json_name = "attrPs2"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:2,sizeExt"
    string attr_ps3 = 3 [json_name = "attrPs3"];
    // @inject_tag: aper:"sizeLB:0,sizeUB:3"
    string attr_ps4 = 4 [json_name = "attrPs4"];
    // @inject_tag: aper:"sizeLB:2,sizeUB:3"
    string attr_ps5 = 5 [json_name = "attrPs5"];
    // @inject_tag: aper:"sizeLB:1,sizeUB:3,sizeExt"
    string attr_ps6 = 6 [json_name = "attrPs6"];
    // @inject_tag: aper:"optional,sizeLB:2,sizeUB:6"
    optional string attr_ps7 = 7 [json_name = "attrPs7"];
};

// sequence from tes_sm.asn1:133
// {TEST-List1}
message TestList1 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:12,valueExt"
    repeated Item value = 1 [json_name = "value"];
};

// sequence from tes_sm.asn1:134
// {Item}
message Item {
    // @inject_tag: aper:"optional"
    optional int32 item1 = 1 [json_name = "item1"];
    // @inject_tag: aper:"sizeLB:3,sizeUB:7"
    asn1.v1.BitString item2 = 2 [json_name = "item2"];
};

// sequence from tes_sm.asn1:140
// {TEST-List2}
message TestList2 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:12,valueExt"
    repeated ItemExtensible value = 1 [json_name = "value"];
};

// sequence from tes_sm.asn1:141
// {ItemExtensible}
message ItemExtensible {
    int32 item1 = 1 [json_name = "item1"];
    // @inject_tag: aper:"optional,sizeLB:3,sizeUB:7"
    optional bytes item2 = 2 [json_name = "item2"];
};

// sequence from tes_sm.asn1:147
// {TEST-FullyOptionalSequence}
message TestFullyOptionalSequence {
    // @inject_tag: aper:"optional"
    optional int32 item1 = 1 [json_name = "item1"];
    // @inject_tag: aper:"optional,sizeLB:3,sizeUB:7"
    optional bytes item2 = 2 [json_name = "item2"];
    // @inject_tag: aper:"optional"
    optional bool item3 = 3 [json_name = "item3"];
    // @inject_tag: aper:"optional,valueLB:0,valueUB:1,valueExt"
    optional TestFullyOptionalSequenceItem4 item4 = 4 [json_name = "item4"];
    // @inject_tag: aper:"optional,valueLB:0,valueUB:0"
    optional int32 item5 = 5 [json_name = "item5"];
};

// sequence from tes_sm.asn1:156
// {TEST-ListExtensible1}
message TestListExtensible1 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:4,sizeExt"
    repeated Item value = 1 [json_name = "value"];
};

// sequence from tes_sm.asn1:157
// {TEST-ListExtensible2}
message TestListExtensible2 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:4,sizeExt,valueExt"
    repeated ItemExtensible value = 1 [json_name = "value"];
};

// sequence from tes_sm.asn1:158
// {TEST-ListExtensible3}
message TestListExtensible3 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:4,sizeExt,valueExt"
    repeated TestFullyOptionalSequence value = 1 [json_name = "value"];
};

// sequence from tes_sm.asn1:160
// {TEST-List3}
message TestList3 {
    // @inject_tag: aper:"sizeLB:0,sizeUB:12,valueExt"
    repeated TestFullyOptionalSequence value = 1 [json_name = "value"];
};

// sequence from test_sm.asn1:193
// {TEST-TopLevelPDU}
message TestTopLevelPdu {
    TestUnconstrainedInt opt1 = 1 [json_name = "opt1"];
    // @inject_tag: aper:"optional"
    optional TestConstrainedReal opt2 = 2 [json_name = "opt2"];
    // @inject_tag: aper:"valueExt"
    TestNestedChoice opt3 = 3 [json_name = "opt3"];
    TestBitString opt4 = 4 [json_name = "opt4"];
    // @inject_tag: aper:"optional"
    optional TestOctetString opt5 = 5 [json_name = "opt5"];
    // @inject_tag: aper:""
    TestListExtensible3 opt6 = 6 [json_name = "opt6"];
    // @inject_tag: aper:"valueExt"
    TestEnumeratedExtensible opt7 = 7 [json_name = "opt7"];
};

message SampleE2apPduChoice {
    //@inject_tag: aper:"valueLB:0,valueUB:65535,unique"
    int32 id = 1;
    //@inject_tag: aper:"valueLB:0,valueUB:2"
    int32 criticality = 2;
    //@inject_tag: aper:"canonicalOrder"
    CanonicalChoice ch = 3;
}

// Passing "choiceIdx" is not necessary, since CHOICE index is stored in ID
message CanonicalChoice {
    oneof canonical_choice {
        SampleOctetString ch1 = 1;
        SampleConstrainedInteger ch2 = 2;
        SampleBitString ch3 = 3;
        TestListExtensible1 ch4 = 4;
        //@inject_tag: aper:"valueExt"
        Item ch5 = 5;
        SampleNestedE2apPduChoice ch6 = 6;
    }
}

message SampleOctetString {
    bytes value = 1;
}

message SampleConstrainedInteger {
    // @inject_tag: aper:"valueLB:0,valueUB:255,valueExt"
    int32 value = 1;
}

message SampleBitString {
    // @inject_tag: aper:"sizeLB:24,sizeUB:50,sizeExt"
    asn1.v1.BitString value = 1;
}

message SampleNestedE2apPduChoice {
    //@inject_tag: aper:"valueLB:0,valueUB:65535,unique"
    int32 id = 1;
    //@inject_tag: aper:"valueLB:0,valueUB:2"
    int32 criticality = 2;
    //@inject_tag: aper:"canonicalOrder"
    CanonicalNestedChoice ch = 3;
}

// Passing "choiceIdx" is not necessary, since CHOICE index is stored in ID
message CanonicalNestedChoice {
    oneof canonical_nested_choice {
        SampleOctetString ch1 = 1;
        SampleConstrainedInteger ch2 = 2;
        SampleBitString ch3 = 3;
        TestListExtensible1 ch4 = 4;
    }
}

message MixedChoice {
    oneof mixed_choice {
        //@inject_tag: aper:"choiceIdx:1"
        SampleE2apPduChoice ch1 = 1;
        //@inject_tag: aper:"choiceIdx:2"
        SampleConstrainedInteger ch2 = 2;
    }
}

// {ConstrainedChoice3}
message ChoiceExtended {
    // choice from tes_sm.asn1:99
    oneof choice_extended {
        // @inject_tag: aper:"choiceIdx:1,valueExt"
        int32 choice_extended_a = 1 [json_name = "constrainedChoice3A"];
        // @inject_tag: aper:"choiceIdx:2,valueLB:0,valueUB:15,valueExt"
        int32 choice_extended_b = 2 [json_name = "constrainedChoice3B"];
        // @inject_tag: aper:"choiceIdx:3,valueLB:1,valueUB:4294967295,valueExt,fromChoiceExt"
        int32 choice_extended_c = 3 [json_name = "constrainedChoice3C"];
        // @inject_tag: aper:"choiceIdx:4,valueLB:1,valueUB:1,valueExt,fromChoiceExt"
        int32 choice_extended_d = 4 [json_name = "constrainedChoice3D"];
    }
};

message SequenceExtended {
    SampleConstrainedInteger se1 = 1;
    // @inject_tag: aper:"optional"
    optional TestOctetString se2 = 2;
    TestList2 se3 = 3;
    // @inject_tag: aper:"fromValueExt"
    TestConstrainedInt se4 = 4;
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:2,sizeUB:6,sizeExt"
    optional string se5 = 5 [json_name = "attrPs7"];
}

message TestExtension1 {
    int32 item1 = 1 [json_name = "item1"];
    // @inject_tag: aper:"optional,sizeLB:3,sizeUB:7"
    optional bytes item2 = 2 [json_name = "item2"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext1 = 3 [json_name = "ext1"];
}

message TestExtension2 {
    int32 item1 = 1 [json_name = "item1"];
    // @inject_tag: aper:"optional,sizeLB:3,sizeUB:7"
    optional bytes item2 = 2 [json_name = "item2"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext1 = 3 [json_name = "ext1"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext2 = 4 [json_name = "ext2"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext3 = 5 [json_name = "ext3"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext4 = 6 [json_name = "ext4"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext5 = 7 [json_name = "ext5"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext6 = 8 [json_name = "ext6"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext7 = 9 [json_name = "ext7"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext8 = 10 [json_name = "ext8"];
    // @inject_tag: aper:"fromValueExt,optional,sizeLB:3,sizeUB:7"
    optional bytes ext9 = 11 [json_name = "ext9"];
}
