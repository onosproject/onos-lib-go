// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/controller/activator.go

// Package controller is a generated GoMock package.
package controller

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockActivator is a mock of Activator interface
type MockActivator struct {
	ctrl     *gomock.Controller
	recorder *MockActivatorMockRecorder
}

// MockActivatorMockRecorder is the mock recorder for MockActivator
type MockActivatorMockRecorder struct {
	mock *MockActivator
}

// NewMockActivator creates a new mock instance
func NewMockActivator(ctrl *gomock.Controller) *MockActivator {
	mock := &MockActivator{ctrl: ctrl}
	mock.recorder = &MockActivatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActivator) EXPECT() *MockActivatorMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockActivator) Start(ch chan<- bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockActivatorMockRecorder) Start(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockActivator)(nil).Start), ch)
}

// Stop mocks base method
func (m *MockActivator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockActivatorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockActivator)(nil).Stop))
}
